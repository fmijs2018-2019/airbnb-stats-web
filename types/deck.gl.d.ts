export const ArcLayer: any;
export const AttributeManager: any;
export const COORDINATE_SYSTEM: any;
export const CompositeLayer: any;
export const Controller: any;
export const Deck: any;
export const DeckGL: any;
export const FirstPersonView: any;
export const FlyToInterpolator: any;
export const GeoJsonLayer: any;
export const GridCellLayer: any;
export const GridLayer: any;
export const HexagonCellLayer: any;
export const HexagonLayer: any;
export const IconLayer: any;
export const Layer: any;
export const LayerManager: any;
export const LineLayer: any;
export const LinearInterpolator: any;
export const MapController: any;
export const MapView: any;
export const OrbitView: any;
export const OrthographicView: any;
export const PathLayer: any;
export const PerspectiveView: any;
export const PointCloudLayer: any;
export const PolygonLayer: any;
export const ScatterplotLayer: any;
export const ScreenGridLayer: any;
export const TRANSITION_EVENTS: any;
export const TextLayer: any;
export const ThirdPersonView: any;
export const View: any;
export const Viewport: any;
export const WebMercatorViewport: any;
export default _default;
export const _default: any;
export namespace experimental {
	class BinSorter {
		constructor(...args: any[]);
		sortedBins: any;
		maxCount: any;
		binMap: any;
		getBinMap(): any;
		getMaxCount(): any;
		getSortedBins(bins: any, getValue: any): any;
		getValueRange(_ref: any): any;
	}
	const defaultColorRange: number[][];
	function fillArray(_ref3: any): any;
	function flattenVertices(nestedArray: any, ...args: any[]): any;
	function getLinearScale(domain: any, range: any): any;
	function getQuantizeScale(domain: any, range: any): any;
	function linearScale(domain: any, range: any, value: any): any;
	function quantizeScale(domain: any, range: any, value: any): any;
}
export const lighting: any;
export const log: any;
export const project: any;
export const project64: any;
